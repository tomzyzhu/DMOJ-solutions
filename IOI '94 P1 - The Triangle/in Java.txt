import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class TrialOneTriangle {

	public static int answer = 0;
	public static int n;
	public static String[] tokens = new String[101];

	public static int counter = 1;
	public static int[][] triangle = new int[101][101];
	public static int[][] sumGraph = new int[101][101];



	public static void main(String[] args) throws NumberFormatException, IOException{
		BufferedReader input = new BufferedReader(new InputStreamReader(System.in));

		//Taking input
		//saving total row for later
		n = Integer.parseInt(input.readLine());
		for(int i = 0; i < n;i++){

			tokens = input.readLine().split(" "); 

			for(int row = 0; row < counter; row++){
				triangle[i][row] = Integer.parseInt(tokens[row]);

				//Calculate for sumGraph
				//case: first number
				if(i == 0){
					sumGraph[0][0] = triangle[0][0];
					//System.out.print("1.");
				}
				//case: most left
				else if(row == 0){
					sumGraph[i][0] = sumGraph[i-1][0] + triangle[i][0]; 
					//System.out.print("2.");
				}
				//case: upper right bigger than upper left
				else if(sumGraph[i-1][row] > sumGraph[i-1][row-1]){
					sumGraph[i][row] = sumGraph[i-1][row] + triangle[i][row];
					//System.out.print("3.");
				}
				//case: upper right smaller than upper left
				else {
					sumGraph[i][row] = sumGraph[i-1][row-1] + triangle[i][row];
					//System.out.print("4.");
				}
				//System.out.print(sumGraph[i][row] + " ");

			}
			counter++;
			//System.out.println();


		}

		//find largest number for the last row
		for(int i = n; i >= 0; i--){
			if(sumGraph[n-1][i] > answer)
				answer = sumGraph[n-1][i];
		}
		
		System.out.println(answer);

	}

}