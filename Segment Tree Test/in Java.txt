import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class DmojSegtree {

	static BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
	static Node[] seg = new Node[300000];
	static int N;
	static int M; static String op;
	static String[] tokens = new String[300000];
	static int counter = 0;


	public static int gcd(int x, int y){
		return y == 0? x: gcd(y, x%y);
	}

	public static void pushUp(int rt){
		seg[rt].val = min(seg[2*rt].val, seg[2*rt+1].val);
		seg[rt].g = gcd(seg[2*rt].g, seg[2*rt+1].g);
		seg[rt].f = 0;

		if(seg[rt].g == seg[2*rt].g) seg[rt].f += seg[2*rt].f;
		if(seg[rt].g == seg[2*rt+1].g) seg[rt].f += seg[2*rt+1].f;
	}

	public static void build(int l, int r, int rt) throws NumberFormatException, IOException{
		seg[rt] = new Node(); seg[rt].l = l; seg[rt].r = r;
		if(l == r){
			seg[rt].val = Integer.parseInt(tokens[counter]);
			counter++; 
			seg[rt].g = seg[rt].val;
			seg[rt].f = 1;
			return;
		}
		int mid = (l+r)/2;
		build(l, mid, 2*rt); build(mid+1, r, 2*rt+1);
		pushUp(rt);
	}

	public static int min(int n1, int n2){
		if(n1 <= n2){
			return n1;
		}
		else 
			return n2;
	}

	public static void update(int pos, int val, int rt){

		if(seg[rt].l == seg[rt].r && seg[rt].l == pos) {
			seg[rt].val = val; seg[rt].g = seg[rt].val; return;
		}

		int mid = (seg[rt].l + seg[rt].r)/2;

		if(pos <= mid) 
			update(pos, val, 2*rt);
		else 
			update(pos, val, 2*rt+1);

		pushUp(rt);
	}

	public static int query(int l, int r, int rt){
		if(seg[rt].l == l && seg[rt].r == r) 
			return seg[rt].val;

		int mid = (seg[rt].l + seg[rt].r) / 2;
		if(r <= mid) 
			return query(l, r, 2*rt);
		else if(l>mid) 
			return query(l, r, 2*rt+1);
		else 
			return min(query(l, mid, 2*rt), query(mid+1, r, 2*rt+1));
	}

	public static int queryGCD(int l, int r, int rt){
		if(seg[rt].l == l && seg[rt].r == r) 
			return seg[rt].g;
		
		int mid = (seg[rt].l + seg[rt].r)/2;
		if(r <= mid) 
			return queryGCD(l, r, 2*rt);
		else if(l > mid) 
			return queryGCD(l, r, 2*rt+1);
		else 
			return gcd(queryGCD(l, mid, 2*rt), queryGCD(mid+1, r, 2*rt+1));
	}

	public static int queryFreq(int l, int r, int g, int rt){
		if(seg[rt].l == l && seg[rt].r == r) 
			return seg[rt].g == g ? seg[rt].f : 0;
			
		int mid = (seg[rt].l + seg[rt].r)/2;
		if(r <= mid) 
			return queryFreq(l, r, g, 2*rt);
		else if(l>mid) 
			return queryFreq(l, r, g, 2*rt+1);
		else 
			return queryFreq(l, mid, g, 2*rt) + queryFreq(mid+1, r, g, 2*rt+1);
	}

	public static void main(String[] args) throws IOException{

		tokens = in.readLine().split(" ");
		N = Integer.parseInt(tokens[0]);
		M = Integer.parseInt(tokens[1]);
		tokens = in.readLine().split(" ");
		build(1, N, 1);

		for(int i = 0, p, x; i < M; i++){
			tokens = in.readLine().split(" ");
			op = tokens[0]; p = Integer.parseInt(tokens[1]); 
			x = Integer.parseInt(tokens[2]);
			if(op.contains("C")){
				update(p, x, 1);
			}
			else if(op.contains("M")){
				System.out.println(query(p, x, 1));
			}
			else if(op.contains("G")){ 
				System.out.println(queryGCD(p, x, 1));
			}
			else{
				int g = queryGCD(p, x, 1);
				System.out.println(queryFreq(p, x, g, 1));
			}
		}
	}
}


class Node {
    int l, r, val, g, f;
}